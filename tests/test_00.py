#!/usr/bin/python3

import pytest

from web3 import Web3

from brownie import accounts, Contract

    # print(Web3.keccak(b"withdraw(uint256)")[:4].hex())

def test_main(USDC, DAI, WETH, accounts, UniswapV2Router02, MyUniswapV3Exchange, Contract):
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    UniswapV2Router02.swapETHForExactTokens(10000 * 10 ** 6, [WETH, USDC], accounts[0], 2 ** 256 - 1, {"from":accounts[0], "value": 5 * 10 ** 18})
    USDC.approve(MyUniswapV3Exchange, 10000 * 10 ** 6, {"from":accounts[0]})
    uniV3Params = [DAI, WETH, 3000, -120000, 120000, getSqrtRatioAtTick(-120000), getSqrtRatioAtTick(120000), 0, accounts[0], 2 ** 256 - 1]
    MyUniswapV3Exchange.investTokenForUniPair(USDC, 10000 * 10 ** 6, 0, uniV3Params, {"from":accounts[0], "value": 5 * 10 ** 15})
    WETH.deposit({"from": accounts[0], "value": 50 * 10 ** 18})
    UniswapV2Router02.swapETHForExactTokens(100000 * 10 ** 18, [WETH, DAI], accounts[0], 2 ** 256 - 1, {"from":accounts[0], "value": 50 * 10 ** 18})
    uniV3Params = [DAI, WETH, 500, -100000, 100000, 0xb8507a820728200000,  0xde0b6b3a7640000, 0, 0, accounts[0], 2 ** 256 - 1]
    WETH.approve(MyUniswapV3Exchange, 0xde0b6b3a7640000, {"from": accounts[0]})
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    print("-----STEP1-----")
    MyUniswapV3Exchange.addLiquidityForUniV3(0, uniV3Params, {'from': accounts[0]})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    token_id_1 = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], 0)
    WETH.approve(MyUniswapV3Exchange, 0xde0b6b3a7640000, {"from": accounts[0]})
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    
    print("-----STEP2-----")
    MyUniswapV3Exchange.addLiquidityForUniV3(token_id_1, uniV3Params, {'from': accounts[0]})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    uniV3Params = [DAI, WETH, 3000, -120000, 120000, 0xb8507a820728200000,  0xde0b6b3a7640000, 0, 0, accounts[0], 2 ** 256 - 1]
    WETH.approve(MyUniswapV3Exchange, 0xde0b6b3a7640000, {"from": accounts[0]})
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    
    print("-----STEP3-----")
    MyUniswapV3Exchange.addLiquidityForUniV3(0, uniV3Params, {'from': accounts[0]})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    token_id_2 = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], 1)
    WETH.approve(MyUniswapV3Exchange, 0xde0b6b3a7640000, {"from": accounts[0]})
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    
    print("-----STEP4-----")
    MyUniswapV3Exchange.addLiquidityForUniV3(token_id_2, uniV3Params, {'from': accounts[0]})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    
    uniV3Params = [DAI, WETH, 500, -100000, 100000, 0xb8507a820728200000,  0xde0b6b3a7640000, 0, 0, accounts[0], 2 ** 256 - 1]
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    print("-----STEP5-----")
    MyUniswapV3Exchange.addLiquidityEthForUniV3(0, uniV3Params, {'from': accounts[0], 'value': 0xde0b6b3a7640000})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    token_id_3 = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], 2)
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})
    
    print("-----STEP6-----")
    MyUniswapV3Exchange.addLiquidityEthForUniV3(token_id_3, uniV3Params, {'from': accounts[0], 'value': 0xde0b6b3a7640000})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    uniV3Params = [DAI, WETH, 3000, -120000, 120000, 0xb8507a820728200000,  0xde0b6b3a7640000, 0, 0, accounts[0], 2 ** 256 - 1]
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})

    print("-----STEP7-----")
    MyUniswapV3Exchange.addLiquidityEthForUniV3(0, uniV3Params, {'from': accounts[0], 'value': 0xde0b6b3a7640000})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
    token_id_4 = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], 3)
    DAI.approve(MyUniswapV3Exchange, 0xb8507a820728200000, {"from": accounts[0]})

    print("-----STEP8-----")
    MyUniswapV3Exchange.addLiquidityEthForUniV3(token_id_4, uniV3Params, {'from': accounts[0], 'value': 0xde0b6b3a7640000})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    modifyParams = [500, -100000, -50000, accounts[0], 2 ** 256 - 1]
    print("-----STEP9-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id_1, {'from': accounts[0]})
    MyUniswapV3Exchange.modifyPositionForUniV3NFLP(token_id_1, modifyParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    modifyParams = [3000, -120000, -60000, accounts[0], 2 ** 256 - 1]
    print("-----STEP10-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id_2, {'from': accounts[0]})
    MyUniswapV3Exchange.modifyPositionForUniV3NFLP(token_id_2, modifyParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    modifyParams = [3000, -120000, -60000, accounts[0], 2 ** 256 - 1]
    print("-----STEP11-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id_3, {'from': accounts[0]})
    tx2 = MyUniswapV3Exchange.modifyPositionForUniV3NFLP(token_id_3, modifyParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    modifyParams = [500, -120000, -60000, accounts[0], 2 ** 256 - 1]
    print("-----STEP12-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id_4, {'from': accounts[0]})
    tx1 = MyUniswapV3Exchange.modifyPositionForUniV3NFLP(token_id_4, modifyParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    liq = tx1.events['IncreaseLiquidity']['liquidity']
    removeParams = [liq // 2, accounts[0], 2 ** 256 - 1]
    token_id = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], NonfungiblePositionManager.balanceOf(accounts[0]) - 1)
    print("-----STEP13-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id, {'from': accounts[0]})
    tx = MyUniswapV3Exchange.removeLiquidityEthFromUniV3NFLP(token_id, removeParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    removeParams = [liq - liq // 2, accounts[0], 2 ** 256 - 1]
    token_id = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], NonfungiblePositionManager.balanceOf(accounts[0]) - 1)
    print("-----STEP14-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id, {'from': accounts[0]})
    MyUniswapV3Exchange.removeLiquidityFromUniV3NFLP(token_id, removeParams, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    liq = tx2.events['IncreaseLiquidity']['liquidity']
    removeParams = [liq // 2, accounts[0], 2 ** 256 - 1]
    token_id = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], NonfungiblePositionManager.balanceOf(accounts[0]) - 1)
    print("-----STEP15-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id, {'from': accounts[0]})
    MyUniswapV3Exchange.divestUniV3NFLPToToken(token_id, "0x0000000000000000000000000000000000000000", removeParams, 0, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("USDC Balance")
    print(USDC.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))

    removeParams = [liq - liq // 2, accounts[0], 2 ** 256 - 1]
    token_id = NonfungiblePositionManager.tokenOfOwnerByIndex(accounts[0], NonfungiblePositionManager.balanceOf(accounts[0]) - 1)
    print("-----STEP16-----")
    NonfungiblePositionManager.approve(MyUniswapV3Exchange, token_id, {'from': accounts[0]})
    MyUniswapV3Exchange.divestUniV3NFLPToToken(token_id, USDC, removeParams, 0, {'from': accounts[0], 'value': 5 * 10 ** 15})
    print("NFT Balance")
    print(NonfungiblePositionManager.balanceOf(accounts[0]))
    print("Eth Balance")
    print(accounts[0].balance())
    print("WETH Balance")
    print(WETH.balanceOf(accounts[0]))
    print("DAI Balance")
    print(DAI.balanceOf(accounts[0]))
    print("USDC Balance")
    print(USDC.balanceOf(accounts[0]))
    print("Contract Balances")
    print(NonfungiblePositionManager.balance())
    print(WETH.balanceOf(MyUniswapV3Exchange))
    print(DAI.balanceOf(MyUniswapV3Exchange))
